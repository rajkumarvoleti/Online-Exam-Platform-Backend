// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.VarChar(8000)
  expiresAt DateTime
}

model User {
  id               Int        @id @default(autoincrement())
  firstName        String     @db.VarChar(256)
  lastName         String?    @db.VarChar(256)
  phoneNumber      String?
  voucherCode      String?    @db.VarChar(512)
  email            String     @unique @db.VarChar(256)
  password         String
  country          String?    @db.VarChar(256)
  timezone         String?    @db.VarChar(256)
  tagline          String?    @db.VarChar(512)
  bio              String?    @db.VarChar(512)
  createdSubjects  Subject[]  @relation("CreatedSubjects")
  updatedSubjects  Subject[]  @relation("UpdatedSubjects")
  createdTopics    Topic[]    @relation("CreatedTopics")
  updatedTopics    Topic[]    @relation("UpdatedTopics")
  createdQuestions Question[] @relation("CreatedQuestions")
  updatedQuestions Question[] @relation("UpdatedQuestions")
  createdImages    Image[]    @relation("CreatedImages")
  updatedImages    Image[]    @relation("UpdatedImages")
  createdOptions   Option[]   @relation("CreatedOptions")
  updatedOptions   Option[]   @relation("UpdatedOptions")
  createdExams     Exam[]     @relation("CreatedExams")
  updatedExams     Exam[]     @relation("UpdatedExams")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Exam {
  id             Int        @id @default(autoincrement())
  name           String     @db.VarChar(256)
  description    String     @db.VarChar(128)
  testStartDate  String     @default("undefined")
  testEndDate    String     @default("undefined")
  testStartTime  String     @default("undefined")
  testEndTime    String     @default("undefined")
  price          Int
  testDuration   Int
  totalMarks     Int
  totalQuestions Int
  passPercentage Int
  negativeMarks  Int
  questions      Question[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  createdBy      User       @relation("CreatedExams", fields: [createdById], references: [id])
  createdById    Int
  updatedBy      User?      @relation("UpdatedExams", fields: [updatedById], references: [id])
  updatedById    Int?
}

model Subject {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(256)
  description String   @db.VarChar(128)
  topics      Topic[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation("CreatedSubjects", fields: [createdById], references: [id])
  createdById Int
  updatedBy   User?    @relation("UpdatedSubjects", fields: [updatedById], references: [id])
  updatedById Int?
}

model Topic {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(256)
  description String     @db.VarChar(128)
  subject     Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId   Int
  questions   Question[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   User       @relation("CreatedTopics", fields: [createdById], references: [id], onDelete: Cascade)
  createdById Int
  updatedBy   User?      @relation("UpdatedTopics", fields: [updatedById], references: [id], onDelete: Cascade)
  updatedById Int?
}

model Question {
  id                Int                @id @default(autoincrement())
  description       String             @db.VarChar(255)
  type              QuestionType
  complexity        QuestionComplexity
  images            Image[]
  topic             Topic              @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId           Int
  options           Option[]
  answer            String             @default("") @db.VarChar(255)
  answerExplanation String             @db.VarChar(255)
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  createdBy         User               @relation("CreatedQuestions", fields: [createdById], references: [id], onDelete: Cascade)
  createdById       Int
  updatedBy         User?              @relation("UpdatedQuestions", fields: [updatedById], references: [id], onDelete: Cascade)
  updatedById       Int?
  Exam              Exam?              @relation(fields: [examId], references: [id])
  examId            Int?
}

model Option {
  id          Int      @id @default(autoincrement())
  description String   @db.VarChar(128)
  isAnswer    Boolean
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  Int
  images      Image[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation("CreatedOptions", fields: [createdById], references: [id])
  createdById Int
  updatedBy   User?    @relation("UpdatedOptions", fields: [updatedById], references: [id])
  updatedById Int?
}

model Image {
  id          Int       @id @default(autoincrement())
  description String    @db.VarChar(128)
  url         String
  question    Question? @relation(fields: [questionId], references: [id])
  questionId  Int?
  options     Option?   @relation(fields: [optionsId], references: [id])
  optionsId   Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation("CreatedImages", fields: [createdById], references: [id])
  createdById Int
  updatedBy   User      @relation("UpdatedImages", fields: [updatedById], references: [id])
  updatedById Int
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum QuestionType {
  trueOrFalse
  fillInTheBlanks
  multipleChoice
  subjective
}

enum QuestionComplexity {
  easy
  medium
  hard
}
